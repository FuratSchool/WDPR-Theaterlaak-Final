// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace TheaterLaakAPi.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230122213330_te")]
    partial class te
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.2");

            modelBuilder.Entity("ArtiestGroep", b =>
                {
                    b.Property<string>("ArtiestenId")
                        .HasColumnType("TEXT");

                    b.Property<int>("GroepenGroepId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ArtiestenId", "GroepenGroepId");

                    b.HasIndex("GroepenGroepId");

                    b.ToTable("ArtiestGroep");
                });

            modelBuilder.Entity("Bestelling", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("amount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("reference")
                        .HasColumnType("TEXT");

                    b.Property<string>("url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Bestelling");
                });

            modelBuilder.Entity("Betaling", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("reference")
                        .HasColumnType("TEXT");

                    b.Property<bool>("succes")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.ToTable("Betaling");
                });

            modelBuilder.Entity("GroepVoorstelling", b =>
                {
                    b.Property<int>("GroepenGroepId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VoorstellingenVoorstellingId")
                        .HasColumnType("INTEGER");

                    b.HasKey("GroepenGroepId", "VoorstellingenVoorstellingId");

                    b.HasIndex("VoorstellingenVoorstellingId");

                    b.ToTable("GroepVoorstelling");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TheaterLaakAPi.Models.Groep", b =>
                {
                    b.Property<int>("GroepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BandWebsite")
                        .HasColumnType("TEXT");

                    b.Property<string>("GroepNaam")
                        .HasColumnType("TEXT");

                    b.Property<string>("LogoLink")
                        .HasColumnType("TEXT");

                    b.HasKey("GroepId");

                    b.ToTable("Groepen");
                });

            modelBuilder.Entity("TheaterLaakAPi.Models.Rang", b =>
                {
                    b.Property<int>("RangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Capiciteit")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RangNr")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ZaalId")
                        .HasColumnType("INTEGER");

                    b.HasKey("RangId");

                    b.HasIndex("ZaalId");

                    b.ToTable("Rangen");
                });

            modelBuilder.Entity("TheaterLaakAPi.Models.Reservering", b =>
                {
                    b.Property<int>("ReserveringId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ApplicationUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApplicationUserId1")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReserveringsDatum")
                        .HasColumnType("TEXT");

                    b.Property<int>("StoelId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VoorstellingId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("isBetaald")
                        .HasColumnType("INTEGER");

                    b.HasKey("ReserveringId");

                    b.HasIndex("ApplicationUserId1");

                    b.HasIndex("StoelId");

                    b.HasIndex("VoorstellingId");

                    b.ToTable("Reserveringen");
                });

            modelBuilder.Entity("TheaterLaakAPi.Models.Stoel", b =>
                {
                    b.Property<int>("StoelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("RangId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StoelNr")
                        .HasColumnType("INTEGER");

                    b.Property<int>("isInvalide")
                        .HasColumnType("INTEGER");

                    b.HasKey("StoelId");

                    b.HasIndex("RangId");

                    b.ToTable("Stoelen");
                });

            modelBuilder.Entity("TheaterLaakAPi.Models.Voorstelling", b =>
                {
                    b.Property<int>("VoorstellingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EindDatum")
                        .HasColumnType("TEXT");

                    b.Property<double>("Prijs")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("StartDatum")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Tijd")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ZaalId")
                        .HasColumnType("INTEGER");

                    b.HasKey("VoorstellingId");

                    b.HasIndex("ZaalId");

                    b.ToTable("Voorstelling");
                });

            modelBuilder.Entity("TheaterLaakAPi.Models.Zaal", b =>
                {
                    b.Property<int>("ZaalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ZaalId");

                    b.ToTable("Zaal");
                });

            modelBuilder.Entity("TheaterLaakAPi.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Achternaam")
                        .HasColumnType("TEXT");

                    b.Property<string>("Voornaam")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("TheaterLaakAPi.Models.Admin", b =>
                {
                    b.HasBaseType("TheaterLaakAPi.Models.ApplicationUser");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("TheaterLaakAPi.Models.Artiest", b =>
                {
                    b.HasBaseType("TheaterLaakAPi.Models.ApplicationUser");

                    b.HasDiscriminator().HasValue("Artiest");
                });

            modelBuilder.Entity("TheaterLaakAPi.Models.Donateur", b =>
                {
                    b.HasBaseType("TheaterLaakAPi.Models.ApplicationUser");

                    b.Property<double>("Bedrag")
                        .HasColumnType("REAL");

                    b.HasDiscriminator().HasValue("Donateur");
                });

            modelBuilder.Entity("TheaterLaakAPi.Models.Medewerker", b =>
                {
                    b.HasBaseType("TheaterLaakAPi.Models.ApplicationUser");

                    b.HasDiscriminator().HasValue("Medewerker");
                });

            modelBuilder.Entity("ArtiestGroep", b =>
                {
                    b.HasOne("TheaterLaakAPi.Models.Artiest", null)
                        .WithMany()
                        .HasForeignKey("ArtiestenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheaterLaakAPi.Models.Groep", null)
                        .WithMany()
                        .HasForeignKey("GroepenGroepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroepVoorstelling", b =>
                {
                    b.HasOne("TheaterLaakAPi.Models.Groep", null)
                        .WithMany()
                        .HasForeignKey("GroepenGroepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheaterLaakAPi.Models.Voorstelling", null)
                        .WithMany()
                        .HasForeignKey("VoorstellingenVoorstellingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TheaterLaakAPi.Models.Rang", b =>
                {
                    b.HasOne("TheaterLaakAPi.Models.Zaal", "Zaal")
                        .WithMany("Rangen")
                        .HasForeignKey("ZaalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Zaal");
                });

            modelBuilder.Entity("TheaterLaakAPi.Models.Reservering", b =>
                {
                    b.HasOne("TheaterLaakAPi.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Reserveringen")
                        .HasForeignKey("ApplicationUserId1");

                    b.HasOne("TheaterLaakAPi.Models.Stoel", "Stoel")
                        .WithMany("Reserveringen")
                        .HasForeignKey("StoelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheaterLaakAPi.Models.Voorstelling", "Voorstelling")
                        .WithMany("Reserveringen")
                        .HasForeignKey("VoorstellingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Stoel");

                    b.Navigation("Voorstelling");
                });

            modelBuilder.Entity("TheaterLaakAPi.Models.Stoel", b =>
                {
                    b.HasOne("TheaterLaakAPi.Models.Rang", "Rang")
                        .WithMany("Stoelen")
                        .HasForeignKey("RangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rang");
                });

            modelBuilder.Entity("TheaterLaakAPi.Models.Voorstelling", b =>
                {
                    b.HasOne("TheaterLaakAPi.Models.Zaal", "Zaal")
                        .WithMany("Voorstellingen")
                        .HasForeignKey("ZaalId");

                    b.Navigation("Zaal");
                });

            modelBuilder.Entity("TheaterLaakAPi.Models.Rang", b =>
                {
                    b.Navigation("Stoelen");
                });

            modelBuilder.Entity("TheaterLaakAPi.Models.Stoel", b =>
                {
                    b.Navigation("Reserveringen");
                });

            modelBuilder.Entity("TheaterLaakAPi.Models.Voorstelling", b =>
                {
                    b.Navigation("Reserveringen");
                });

            modelBuilder.Entity("TheaterLaakAPi.Models.Zaal", b =>
                {
                    b.Navigation("Rangen");

                    b.Navigation("Voorstellingen");
                });

            modelBuilder.Entity("TheaterLaakAPi.Models.ApplicationUser", b =>
                {
                    b.Navigation("Reserveringen");
                });
#pragma warning restore 612, 618
        }
    }
}
